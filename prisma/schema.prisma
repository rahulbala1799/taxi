generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  name                String?
  password            String
  phone               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                String               @default("DRIVER")
  totalEarnings       Float                @default(0)
  goalAmount          Float                @default(1000000)
  fuelExpenses        FuelExpense[]
  insuranceExpenses   InsuranceExpense[]
  maintenanceExpenses MaintenanceExpense[]
  otherExpenses       OtherExpense[]
  rides               Ride[]
  shifts              Shift[]
  vehicles            Vehicle[]
}

model Ride {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  pickupLocation  String
  dropoffLocation String
  distance        Float
  duration        Int
  fare            Float
  tips            Float    @default(0)
  totalEarned     Float
  vehicleType     String   @default("Tesla")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  shiftId         String?
  rideSource      String   @default("WALK_IN")
  tollAmount      Float    @default(0)
  shift           Shift?   @relation(fields: [shiftId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model DailyStats {
  id            String   @id @default(uuid())
  date          DateTime @unique
  ridesCount    Int      @default(0)
  totalDistance Float    @default(0)
  totalDuration Int      @default(0)
  totalEarnings Float    @default(0)
  averageFare   Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Vehicle {
  id                  String               @id @default(uuid())
  make                String
  model               String
  year                Int
  licensePlate        String               @unique
  fuelType            String               @default("Electric")
  capacity            Int                  @default(4)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  driverId            String
  fuelExpenses        FuelExpense[]
  insuranceExpenses   InsuranceExpense[]
  maintenanceExpenses MaintenanceExpense[]
  otherExpenses       OtherExpense[]
  shifts              Shift[]
  driver              User                 @relation(fields: [driverId], references: [id])
}

model Shift {
  id         String    @id @default(uuid())
  date       DateTime  @default(now())
  startTime  DateTime  @default(now())
  endTime    DateTime?
  startRange Float?
  endRange   Float?
  status     String    @default("ACTIVE")
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  driverId   String
  vehicleId  String
  rides      Ride[]
  driver     User      @relation(fields: [driverId], references: [id])
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
}

model FuelExpense {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  amount          Float
  fuelType        String
  quantity        Float?
  odometerReading Float?
  fullTank        Boolean  @default(true)
  vehicleId       String
  driverId        String
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  driver          User     @relation(fields: [driverId], references: [id])
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
}

model MaintenanceExpense {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  amount          Float
  serviceType     String
  odometerReading Float?
  vehicleId       String
  driverId        String
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  driver          User     @relation(fields: [driverId], references: [id])
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
}

model InsuranceExpense {
  id            String   @id @default(uuid())
  startDate     DateTime @default(now())
  endDate       DateTime
  amount        Float
  monthlyAmount Float
  paymentCycle  String   @default("MONTHLY")
  provider      String
  policyNumber  String?
  vehicleId     String
  driverId      String
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  driver        User     @relation(fields: [driverId], references: [id])
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
}

model OtherExpense {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  amount          Float
  category        String
  vehicleId       String?
  driverId        String
  notes           String?
  receiptImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  driver          User     @relation(fields: [driverId], references: [id])
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id])
}
